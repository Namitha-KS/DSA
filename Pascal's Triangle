Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:


 

Example 1:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
Example 2:

Input: numRows = 1
Output: [[1]]
 

Constraints:

1 <= numRows <= 30


/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
#include <stdlib.h>

int** generate(int numRows, int* returnSize, int** returnColumnSizes) 
{
    // Allocate memory for the result array
    int** triangle = (int**)malloc(numRows * sizeof(int*));
    
    // Allocate memory for the column sizes array
    *returnColumnSizes = (int*)malloc(numRows * sizeof(int));
    
    for (int i = 0; i < numRows; i++) {
        // Allocate memory for the i-th row
        triangle[i] = (int*)malloc((i + 1) * sizeof(int));
        
        // Set the size of the i-th row
        (*returnColumnSizes)[i] = i + 1;
        
        // First and last elements of each row are 1
        triangle[i][0] = 1;
        triangle[i][i] = 1;
        
        // Fill in the rest of the elements
        for (int j = 1; j < i; j++) {
            triangle[i][j] = triangle[i - 1][j - 1] + triangle[i - 1][j];
        }
    }
    
    *returnSize = numRows;
    return triangle;
}
